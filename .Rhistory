getwd()
setwd("D:/R_WORKSPACE/R_Algorithm")
install.package()
install.packages()
install.packages("knn")
install.packages("kknn")
?kknn
??kknn
library(help=kknn)
library(kknn)
help("kknn")
contr.matrix(5)
contr.matric(5)
contr.metric(5)
data(glass)
glass
source('D:/R_WORKSPACE/R_Source/kknn/R/kknn.R')
library(kknn)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
summary(iris.kknn)
fit <- fitted(iris.kknn)
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")
[(iris.valid$Species != fit)+1])
data(ionosphere)
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
iris
matrix(0,1,1)
iris
View(iris)
clear()
summary(iris.kknn)
m
val
fit
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")[(iris.valid$Species != fit)+1])
page.rank
page.rank()
help("page")
source('D:/R_WORKSPACE/R_Source/igraph_0.7.1/igraph/demo/smallworld.R')
library(igraph)
source('D:/R_WORKSPACE/R_Source/igraph_0.7.1/igraph/demo/smallworld.R')
graph.ring
graph.ring()
g <- random.graph.game(20, 5/20, directed=TRUE)
page.rank(g)$vector
g2 <- graph.star(10)
page.rank(g2)$vector
# Personalized PageRank
g3 <- graph.ring(10)
page.rank(g3)$vector
reset <- seq(vcount(g3))
page.rank(g3, personalized=reset)$vector
g <- random.graph.game(20, 5/20, directed=TRUE)
g
str
str(g)
page.rank(g)$vector
g2 <- graph.star(10)
page.rank(g2)$vector
g3 <- graph.ring(10)
reset <- seq(vcount(g3))
page.rank(g3)$vector
reset <- seq(vcount(g3))
page.rank(g3, personalized=reset)$vector
plot(g)
plot(g1)
plot("g2")
plot(g2)
plot(g3)
plot(g2)
plot(g)
reset
page.rank(g3)$value
g3
page.rank(g)$value
page.rank(g)
g3
plot(g3)
g3$vector
g3$edge
g3$value
page.rank(g3)$vector
reset <- seq(vcount(g3))
page.rank(g3, personalized=reset)$vector
reset
page.rank(g)$vector
plot(g)
