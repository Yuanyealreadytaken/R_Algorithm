## png("net_walktrap.png", width = 500, height = 500)
#par(mar = c(0, 0, 0, 0))
#set.seed(14)
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=20)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
## png("net_walktrap.png", width = 500, height = 500)
#par(mar = c(0, 0, 0, 0))
#set.seed(14)
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$btn = betweenness(friends.graph, directed = F)
plot(V(friends.graph)$btn)
axis(2)
plot(V(friends.graph)$btn)
axis(2)
V(friends.graph)$btn = betweenness(friends.graph, directed = F)
plot(V(friends.graph)$btn)
plot(V(friends.graph)$btn, xlab="Vertex", ylab="Betweenness")
max(V(friends.graph)$btn)
friends.sample <- friends.whole[((from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
V(friends.graph)$size = 2.5
V(friends.graph)[btn>=20000]$size = 6
V(friends.graph)$label = NA
V(friends.graph)[btn>=20000]$label=V(friends.graph)[btn>=20000]$name
plot(friends.graph, layout = layout.fruchterman.reingold,
vertex.size = V(friends.graph)$size, vertex.color = V(friends.graph)$color,
vertex.label = V(friends.graph)$label, edge.color = grey(0.5),
edge.arrow.mode = "-")
V(friends.graph)$size = 2.5
V(friends.graph)[btn>=20000]$size = 10
V(friends.graph)$label = NA
V(friends.graph)[btn>=20000]$label=V(friends.graph)[btn>=20000]$name
plot(friends.graph, layout = layout.fruchterman.reingold,
vertex.size = V(friends.graph)$size, vertex.color = V(friends.graph)$color,
vertex.label = V(friends.graph)$label, edge.color = grey(0.5),
edge.arrow.mode = "-")
friends.recommand <- c(friends.whole$from[(friends.whole$to %in% friends.connected)],
friends.whole$to[(friends.whole$from %in% friends.connected)])
friends.recommand <- friends.recommand[friends.recommand!=uid]
listall = sort(table(friends.recommand), dec = T)
listall
name(listall[1])
names(listall[1])
names(listall[0])
names(listall[1:10])
friends.2nd <- friends.2nd[friends.2nd!=uid]
friends.recommand <- sort(table(friends.2nd), dec = T)
friends.recommand <- names(friends.recommand[1:10])
friends.2nd <- c(friends.whole$from[(friends.whole$to %in% friends.connected)],
friends.whole$to[(friends.whole$from %in% friends.connected)])
# remove the user himself
friends.2nd <- friends.2nd[friends.2nd!=uid]
friends.recommand <- sort(table(friends.2nd), dec = T)
friends.recommand <- names(friends.recommand[1:10])
V(friends.graph)
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to","time"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 11
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d=friends.sample, directed=F)
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
V(friends.graph)$color = NA
V(friends.graph)[friends.graph %in% friends.connected]$color = "red"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color
friends.com = walktrap.community(friends.graph, steps=20)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
V(friends.graph)$color
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to","time"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 11
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d=friends.sample, directed=F)
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
#V(friends.graph)$color = NA
#V(friends.graph)[friends.graph %in% friends.connected]$color = "red"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[friends.graph %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color
friends.connected
V(friends.graph)[V(friends.graph) %in% friends.connected]$color = "#CD3333FF"
V(friends.graph)$color
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
friends.connected
V(friends.graph)
V(friends.graph)$color
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)$color
V(friends.graph)[%in% friends.connected]$color = "#CD3333FF"
V(friends.graph)
friends.connected
degree(friends.graph[V(friends.graph) %in% friends.connected])
degree(friends.graph)
degree(friends.graph)[9]
dg[9]
dg[9][1]
dg[9][2]
dg[9]$name
dg[9]$names
name(dg[9])
names(dg[9])
values(dg[9])
dg[9]
dg[0,9]
dg[9] == 19
dg[names(dg) %in% friends.connected]
V(friends.graph)
names(V(friends.graph))
friends.connected
degree(friends.graph)
degree(friends.graph)[1]
names(degree(friends.graph)[1])
dg[names(dg) %in% friends.connected]
V(friends.graph)
V(friends.graph)[1]
V(friends.graph)[1:10]
tes <- V(friends.graph)[1:10]
V(friends.graph)$name = V(friends.graph)
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
V(friends.graph)$color
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[1]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[2]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
clear
clean
clr
friends.whole
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[4]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
V(friends.graph)$color[1:10]
V(friends.graph)[1:10]
V(friends.graph)$name[1:10]
names(V(friends.graph))[1:10]
names(V(friends.graph))
name(V(friends.graph))
friends.simple
friends.sample
friends.sample[1:10]
friends.sample[1:10,1:10]
friends.sample[10,10]
friends.sample[1,1]
friends.sample$from[1:10]
friends.graph[1:10]
V(friends.graph)
V(friends.graph)[1:10]
unique(friends.sample$from)
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to","time"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 11
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(friends.sample$from))
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to))
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
V(friends.graph)$name
V(friends.graph)$name[1:10]
V(friends.graph)[1:10]
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
dg
sort(dg)
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to","time"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 15
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
V(friends.graph)$color = "#00BFFFFF"
V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 554
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) && (friends.whole$to %in% friends.connected))]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected))]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=5)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 554
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
uid <- 23
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
uid <- 11
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
uid <- 1646
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
uid <- 979
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 2.5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to"))
# this is a undirected graph, and no loop, we can do the research based on the friends of the friends of a certain user
uid <- 979
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
# detect community
friends.com = walktrap.community(friends.graph, steps=5)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=10)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=20)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=100)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
sort(dg, desc)
sort(dg, dec=T)
sort(degree(friends.graph), dec=T)
sort(degree(friends.whole), dec=T)
sort(degree(friends.graph), dec=T)
count(friends.whole)
table(friends.whole)
table(c(friends.whole$from, friends.whole$to))
sort(table(c(friends.whole$from, friends.whole$to)), dec=T)
sort(table(c(friends.whole$from, friends.whole$to)), dec=T)[1:10]
library(igraph)
opar <- par(no.readonly=TRUE)
par(mar = c(0, 0, 0, 0))
set.seed(14)
# read whole data from file
friends.whole <- read.table("D:/R_WORKSPACE/DATA/facebook-wosn-links-clean.txt", header=FALSE, sep=" ", col.names=c("from","to"))
# sort(table(c(friends.whole$from, friends.whole$to)), dec=T)[1:50]
# this is a undirected graph, and no loop, we can do the research based on the friends of a certain user
uid <- 979
friends.connected <- unique(c(friends.whole$to[friends.whole$from == uid], friends.whole$from[friends.whole$to == uid]))
#friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) | (friends.whole$to %in% friends.connected)), c(1,2)]
friends.sample <- friends.whole[((friends.whole$from %in% friends.connected) & (friends.whole$to %in% friends.connected)), c(1,2)]
friends.graph <- graph.data.frame(d = friends.sample, directed = F, vertices = unique(c(friends.sample$from, friends.sample$to)))
friends.graph <- simplify(friends.graph)
is.simple(friends.graph)
# remove isolated vertex
dg <- degree(friends.graph)
friends.graph <- induced.subgraph(friends.graph, which(dg > 0))
# plot graph, vertex get grouped by edges
# V(friends.graph)$color = "#00BFFFFF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
# V(friends.graph)[name %in% friends.connected]$color = "#CD3333FF"
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.label = NA, edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=5)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=50)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
friends.com = walktrap.community(friends.graph, steps=10)
#subgroup = split(friends.com$names, friends.com$membership)
V(friends.graph)$sg = friends.com$membership
V(friends.graph)$color = NA
V(friends.graph)$color = rainbow(max(V(friends.graph)$sg))[V(friends.graph)$sg]
# plot graph with communities devided
plot(friends.graph, layout = layout.fruchterman.reingold, vertex.size = 5,
vertex.color = V(friends.graph)$color, vertex.label = NA,
edge.color = grey(0.5), edge.arrow.mode = "-")
V(friends.graph)$btn = betweenness(friends.graph, directed = F)
plot(V(friends.graph)$btn, xlab="Vertex", ylab="Betweenness")
# from the graph, we can use 20000 as the threshold
# plot betweenness graph
V(friends.graph)$size = 5
V(friends.graph)[btn>=20000]$size = 15
V(friends.graph)$btn = betweenness(friends.graph, directed = F)
plot(V(friends.graph)$btn, xlab="Vertex", ylab="Betweenness")
V(friends.graph)$size = 5
V(friends.graph)[btn>=500]$size = 15
V(friends.graph)$label = NA
V(friends.graph)[btn>=500]$label = V(friends.graph)[btn>=500]$name
plot(friends.graph, layout = layout.fruchterman.reingold,
vertex.size = V(friends.graph)$size, vertex.color = V(friends.graph)$color,
vertex.label = V(friends.graph)$label, edge.color = grey(0.5),
edge.arrow.mode = "-")
friends.2nd <- c(friends.whole$from[(friends.whole$to %in% friends.connected)],
friends.whole$to[(friends.whole$from %in% friends.connected)])
# remove the user himself
friends.2nd <- friends.2nd[friends.2nd!=uid]
friends.recommand <- sort(table(friends.2nd), dec = T)
friends.recommand <- names(friends.recommand[1:10])
friends.recommand
friends.2nd <- c(friends.whole$from[(friends.whole$to %in% friends.connected)],
friends.whole$to[(friends.whole$from %in% friends.connected)])
# remove the user himself
friends.2nd <- friends.2nd[friends.2nd!=uid]
friends.recommand <- sort(table(friends.2nd), dec = T)
friends.recommand
friends.recommand[1:10]
